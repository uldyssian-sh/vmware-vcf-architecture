name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.11'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy pyyaml
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run Black formatter check
        run: black --check --diff .
      
      - name: Run Flake8 linter
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Run MyPy type checker
        run: mypy . --ignore-missing-imports || true

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-format]
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Create test structure
        run: |
          mkdir -p tests
          if [ ! -f tests/__init__.py ]; then touch tests/__init__.py; fi
          if [ ! -f tests/test_basic.py ]; then
            cat > tests/test_basic.py << 'EOF'
import pytest
import os

def test_repository_structure():
    """Test basic repository structure."""
    assert os.path.exists('README.md')
    assert os.path.exists('requirements.txt')
    assert os.path.exists('LICENSE')

def test_requirements_file():
    """Test requirements.txt is valid."""
    with open('requirements.txt', 'r') as f:
        content = f.read()
        assert 'requests' in content
        assert 'pyyaml' in content

def test_basic_imports():
    """Test basic Python imports work."""
    import yaml
    import requests
    assert yaml.__version__
    assert requests.__version__
EOF
          fi
      
      - name: Run tests
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == env.PYTHON_VERSION
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  validate-config:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Validate YAML files
        run: |
          python -c "import yaml; [yaml.safe_load(open(f)) for f in ['package.json', '.github/workflows/ci.yml', '.github/workflows/deploy.yml'] if f.endswith('.yml')]"
      
      - name: Validate JSON files
        run: |
          python -c "import json; [json.load(open(f)) for f in ['package.json'] if f.endswith('.json')]"
      
      - name: Check file permissions
        run: |
          find . -type f -name '*.sh' -exec test -x {} \; -print || echo 'No executable shell scripts found'
      
      - name: Repository validation
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          ls -la
          echo "âœ… All validations passed successfully"
